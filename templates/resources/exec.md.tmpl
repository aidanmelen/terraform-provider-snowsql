---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

## Example Basic Usage

```terraform
resource "snowsql_exec" "role" {
  name = "my_role"

  create {
    statements = "CREATE ROLE IF NOT EXISTS my_role;"
  }

  delete {
    statements = "DROP ROLE IF EXISTS my_role;"
  }
}
```

-> **NOTE on create statements:** We recommend testing the SnowSQL statements in a [Snowflake worksheet](https://docs.snowflake.com/en/user-guide/ui-worksheet) prior to automating with Terraform.

~> **NOTE on delete statements:** Failure to ensure that delete statements negate create statements will lead to orphaned snowflake objects.

## Example Multi-line Statement Usage

The `snowsql_exec` supports multi-line statements.

```terraform
resource "snowsql_exec" "role" {
  name = "my_role"

  create {
    statements = <<-EOT
      CREATE ROLE IF NOT EXISTS my_role
          WITH COMMENT = 'created with terraform';
    EOT
  }

  delete {ts will result in an in-place change
    statements = "DROP ROLE IF EXISTS my_role;"
  }
}
```

## Example Multi-Statements Usage

The `snowsql_exec` support multi-statements when separated with semicolons.

{{ tffile "examples/resources/exec/complete/main.tf" }}

## Avoiding Replacement

Any changes to the `create` statements will cause a replacement change. Adding or changing the optional `update` statements after the first terraform apply will cause an in-place change with the execution of the `update` statement. For example:

-> **NOTE on create statements** The `create` statements are only executed on creation or when the `create` statements change.

1. The `create` statements are run on the first apply:

    ```terraform
    resource "snowsql_exec" "role" {
      name = "my_role"

      create {
        statements = "CREATE ROLE IF NOT EXISTS my_role;"
      }

      read {
        statements = "SHOW ROLES LIKE 'my_role';"
      }

      delete {
        statements = "DROP ROLE IF EXISTS my_role;"
      }
    }
    ```

2. Add the `update` statements to alter the role in-place.

    ```terraform
    resource "snowsql_exec" "role" {
      name = "my_role"

      create {
        statements = "CREATE ROLE IF NOT EXISTS my_role;"
      }

      read {
        statements = "SHOW ROLES LIKE 'my_role';"
      }

      update {
        statements = "ALTER ROLE IF EXISTS my_role SET COMMENT = 'updated with terraform';"
      }

      delete {
        statements = "DROP ROLE IF EXISTS my_role;"
      }
    }
    ```

{{ .SchemaMarkdown | trimspace }}

## Import

Import is supported using the following syntax:

```shell
terraform import snowsql_exec.name name
```